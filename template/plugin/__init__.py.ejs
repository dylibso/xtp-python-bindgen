# THIS FILE WAS GENERATED BY `xtp-python-bindgen`. DO NOT EDIT.

from typing import Optional, List # noqa: F401
from datetime import datetime # noqa: F401
import json
import extism # pyright: ignore
import plugin

<% if (Object.values(schema.schemas).length > 0){ %>
from pdk_types import <%- Object.values(schema.schemas).map(schema => pythonTypeName(schema.name)).join(", ") %> # noqa: F401 
<% } %>

# Imports

<% schema.imports.forEach(imp => { %>
<% if (hasComment(imp)) -%>
#<%- imp.name %> <%- formatCommentBlock(imp.description, "# ") %>
<% if (hasComment(imp.input)) { -%>
# It takes input of <%- toPythonParamType(imp.input) %> (<%- formatCommentLine(imp.input.description) %>)
<% } -%>
<% if (hasComment(imp.output)) { -%>
# And it returns an output <%- toPythonParamType(imp.output) %> (<%- formatCommentLine(imp.output.description) %>)
<% } -%>
@extism.import_fn("extism:host/user", "<%- imp.name %>")
def _<%- pythonFunctionName(imp.name) %>(<% if (imp.input) { -%>input: <%- toPythonHostParamType(imp.input) %> <%} -%>) <% if (imp.output) { %> -> <%- toPythonHostParamType(imp.output) %> <% } %>: # pyright: ignore [reportReturnType]
  pass
<% }) %>

# Exports
# The implementations for these functions is in `plugin.py`

<% schema.exports.forEach(ex => { -%>
<% if (hasComment(ex)) { -%>
# <%- formatCommentBlock(ex.description, "# ") %>
<% } -%>
@extism.plugin_fn
def <%- ex.name %>():
<% if (ex.input) { -%>
  input = <% if (ex.input.contentType === 'application/x-binary') { %> extism.input_bytes() <% } else { %> extism.input_str() <% } %>
<% if (ex.input.contentType === 'application/json') { -%>
<% if (ex.input.xtpType.kind === 'object') { -%>
  input = <%- toPythonParamType(ex.input) %>.from_json(input)
<% } else { -%>
  input = json.loads(input)
<% } -%>
<% } -%>
<% } -%>
  res = plugin.<%- pythonFunctionName(ex.name) %>(<% if (ex.input) { %> input <% } %>)
<% if (ex.output) { -%>
<% if (ex.output.contentType === 'application/x-binary') { %>  extism.output_bytes( <% } else { %>  extism.output_str( <% } %>
<% if (ex.output.contentType === 'application/json') { -%>
<% if (ex.output.xtpType.kind === 'object') { -%>
  res.to_json()
<% } else { -%>
  json.dumps(res)
<% } %>
<% } else { -%>
  res
<% } -%>
  )
<% } -%>
<% }) -%>
